Rearrange the integers to produce the content of the array A=[12, 25, 26, 15, 1] with n integers after 3 passes of this version of Bubble Sort.
for (j = 0; j < 3; ++j) // 3 passes
  for (i = 0; i < n-j-1; ++i)
    if (A[i] > A[i+1])
      swap(A[i], A[i+1]);

Besoin de plus d'explication sur Bubble Sort


How many swap(s) is/are required to sort an array of n=4 integers: [20, 26, 6, 24] using this version of Bubble Sort?
for (j = 0; j < n-1; ++j)
  for (i = 0; i < n-j-1; ++i)
    if (A[i] > A[i+1])
      swap(A[i], A[i+1]);

Besoin de plus d'explication sur Bubble Sort


Rearrange the integers to produce the content of the array A=[17, 20, 11, 3, 21] with n integers after 3 passes of this version of Selection Sort.
for (i = 0; i < 3; ++i) { // 3 passes
  cur_min = i;
  for (j = i+1; j < n; ++j)
    if (A[j] < A[cur_min])
      cur_min = j;
  swap(A[i], A[cur_min]);
}


An array of 7 integers is being sorted in non-decreasing order using Quicksort.
Suppose the algorithm has just finished the first pass of partitioning and pivot swapping thus changing the content of the original array into the following array:
[9, 7, 9, 12, 25, 19, 15]
From the resulting array above, determine how many integers could have been the pivot?
Note: elements == pivot are partitioned to the right.

How many comparison(s) is/are required to sort an array of n=7 integers: [18, 16, 14, 13, 17, 19, 15] using this version of Bubble Sort?
for (j = 0; j < n-1; ++j)
  for (i = 0; i < n-j-1; ++i)
    if (A[i] > A[i+1])
      swap(A[i], A[i+1]);
    
if (A[i] > A[i+1]) : Cette condition est irrealisable 